{"version":3,"file":"app/api/creators/route.js","mappings":"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","sources":["webpack://_N_E/external commonjs \"node:async_hooks\"","webpack://_N_E/external commonjs \"node:buffer\"","webpack://_N_E/./app/api/creators/route.ts","webpack://_N_E/./app/api/creators/route.ts?af65","webpack://_N_E/?d413","webpack://_N_E/./node_modules/.pnpm/drizzle-orm@0.36.4_@neondatabase+serverless@0.10.4_@types+pg@8.11.6_react@18.2.0/node_modules/drizzle-orm/pg-core/indexes.js","webpack://_N_E/./drizzle/schema.ts","webpack://_N_E/./lib/db.ts"],"sourcesContent":["module.exports = require(\"node:async_hooks\");","module.exports = require(\"node:buffer\");","import { NextResponse } from \"next/server\";\nimport { db } from \"@/lib/db\";\nimport { hosts, events, stories } from \"@/drizzle/schema\";\n\nexport const runtime = 'edge';\n\nexport async function GET() {\n  try {\n    // Get all hosts, stories, and events for aggregation\n    const [hostsList, allStories, allEvents] = await Promise.all([\n      db.select().from(hosts),\n      db.select().from(stories),\n      db.select().from(events)\n    ]);\n\n    // Create metrics map for each host\n    const hostMetrics = new Map();\n\n    // Initialize metrics for all hosts\n    for (const host of hostsList) {\n      hostMetrics.set(host.id, {\n        total_sol: 0,\n        supporters: new Set(),\n        shares: 0,\n        stories_count: 0\n      });\n    }\n\n    // Count stories per host\n    for (const story of allStories) {\n      const metrics = hostMetrics.get(story.host_id);\n      if (metrics) {\n        metrics.stories_count += 1;\n      }\n    }\n\n    // Aggregate events metrics\n    for (const event of allEvents) {\n      const story = allStories.find((s) => s.id === event.story_id);\n      if (!story) continue;\n\n      const metrics = hostMetrics.get(story.host_id);\n      if (!metrics) continue;\n\n      if (event.type === \"tip\") {\n        metrics.total_sol += Number(event.amount || 0);\n        metrics.supporters.add(event.signer);\n      } else if (event.type === \"share\") {\n        metrics.shares += 1;\n      }\n    }\n\n    // Build response array\n    const items = hostsList.map((host) => {\n      const metrics = hostMetrics.get(host.id) || {\n        total_sol: 0,\n        supporters: new Set(),\n        shares: 0,\n        stories_count: 0\n      };\n\n      // Extract avatar_url and headline from web2_links if available\n      let avatar_url = \"\";\n      let headline = `${metrics.stories_count} stories`;\n\n      try {\n        const web2Links = JSON.parse(host.web2_links || \"[]\");\n        if (Array.isArray(web2Links) && web2Links.length > 0) {\n          avatar_url = web2Links[0].avatar_url || \"\";\n          headline = web2Links[0].headline || headline;\n        }\n      } catch (e) {\n        // Fallback to default values if JSON parsing fails\n      }\n\n      return {\n        id: host.id,\n        name: host.name,\n        avatar_url,\n        headline,\n        total_sol: metrics.total_sol / 1e9 // Convert from lamports to SOL\n      };\n    }).sort((a, b) => b.total_sol - a.total_sol);\n\n    return NextResponse.json({ items });\n  } catch (error) {\n    console.error(\"Error in /api/creators:\", error);\n    return NextResponse.json({ error: \"Failed to fetch creators\" }, { status: 500 });\n  }\n}","import { AppRouteRouteModule } from \"next/dist/server/future/route-modules/app-route/module.compiled\";\nimport { RouteKind } from \"next/dist/server/future/route-kind\";\nimport { patchFetch as _patchFetch } from \"next/dist/server/lib/patch-fetch\";\nimport * as userland from \"/Users/lvxuan/github/TipConnect/app/api/creators/route.ts\";\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new AppRouteRouteModule({\n    definition: {\n        kind: RouteKind.APP_ROUTE,\n        page: \"/api/creators/route\",\n        pathname: \"/api/creators\",\n        filename: \"route\",\n        bundlePath: \"app/api/creators/route\"\n    },\n    resolvedPagePath: \"/Users/lvxuan/github/TipConnect/app/api/creators/route.ts\",\n    nextConfigOutput,\n    userland\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/creators/route\";\nfunction patchFetch() {\n    return _patchFetch({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\nexport { routeModule, requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, originalPathname, patchFetch,  };\n\n//# sourceMappingURL=app-route.js.map","import { EdgeRouteModuleWrapper } from \"next/dist/server/web/edge-route-module-wrapper\";\n// Import the userland code.\nimport * as module from \"next-app-loader?name=app%2Fapi%2Fcreators%2Froute&page=%2Fapi%2Fcreators%2Froute&pagePath=private-next-app-dir%2Fapi%2Fcreators%2Froute.ts&appDir=%2FUsers%2Flvxuan%2Fgithub%2FTipConnect%2Fapp&appPaths=%2Fapi%2Fcreators%2Froute&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!private-next-app-dir/api/creators/route.ts?__next_edge_ssr_entry__\";\nexport const ComponentMod = module;\nexport default EdgeRouteModuleWrapper.wrap(module.routeModule);\n\n//# sourceMappingURL=edge-app-route.js.map","import { SQL } from \"../sql/sql.js\";\nimport { entityKind, is } from \"../entity.js\";\nimport { IndexedColumn } from \"./columns/index.js\";\nclass IndexBuilderOn {\n  constructor(unique, name) {\n    this.unique = unique;\n    this.name = name;\n  }\n  static [entityKind] = \"PgIndexBuilderOn\";\n  on(...columns) {\n    return new IndexBuilder(\n      columns.map((it) => {\n        if (is(it, SQL)) {\n          return it;\n        }\n        it = it;\n        const clonedIndexedColumn = new IndexedColumn(it.name, !!it.keyAsName, it.columnType, it.indexConfig);\n        it.indexConfig = JSON.parse(JSON.stringify(it.defaultConfig));\n        return clonedIndexedColumn;\n      }),\n      this.unique,\n      false,\n      this.name\n    );\n  }\n  onOnly(...columns) {\n    return new IndexBuilder(\n      columns.map((it) => {\n        if (is(it, SQL)) {\n          return it;\n        }\n        it = it;\n        const clonedIndexedColumn = new IndexedColumn(it.name, !!it.keyAsName, it.columnType, it.indexConfig);\n        it.indexConfig = it.defaultConfig;\n        return clonedIndexedColumn;\n      }),\n      this.unique,\n      true,\n      this.name\n    );\n  }\n  /**\n   * Specify what index method to use. Choices are `btree`, `hash`, `gist`, `spgist`, `gin`, `brin`, or user-installed access methods like `bloom`. The default method is `btree.\n   *\n   * If you have the `pg_vector` extension installed in your database, you can use the `hnsw` and `ivfflat` options, which are predefined types.\n   *\n   * **You can always specify any string you want in the method, in case Drizzle doesn't have it natively in its types**\n   *\n   * @param method The name of the index method to be used\n   * @param columns\n   * @returns\n   */\n  using(method, ...columns) {\n    return new IndexBuilder(\n      columns.map((it) => {\n        if (is(it, SQL)) {\n          return it;\n        }\n        it = it;\n        const clonedIndexedColumn = new IndexedColumn(it.name, !!it.keyAsName, it.columnType, it.indexConfig);\n        it.indexConfig = JSON.parse(JSON.stringify(it.defaultConfig));\n        return clonedIndexedColumn;\n      }),\n      this.unique,\n      true,\n      this.name,\n      method\n    );\n  }\n}\nclass IndexBuilder {\n  static [entityKind] = \"PgIndexBuilder\";\n  /** @internal */\n  config;\n  constructor(columns, unique, only, name, method = \"btree\") {\n    this.config = {\n      name,\n      columns,\n      unique,\n      only,\n      method\n    };\n  }\n  concurrently() {\n    this.config.concurrently = true;\n    return this;\n  }\n  with(obj) {\n    this.config.with = obj;\n    return this;\n  }\n  where(condition) {\n    this.config.where = condition;\n    return this;\n  }\n  /** @internal */\n  build(table) {\n    return new Index(this.config, table);\n  }\n}\nclass Index {\n  static [entityKind] = \"PgIndex\";\n  config;\n  constructor(config, table) {\n    this.config = { ...config, table };\n  }\n}\nfunction index(name) {\n  return new IndexBuilderOn(false, name);\n}\nfunction uniqueIndex(name) {\n  return new IndexBuilderOn(true, name);\n}\nexport {\n  Index,\n  IndexBuilder,\n  IndexBuilderOn,\n  index,\n  uniqueIndex\n};\n//# sourceMappingURL=indexes.js.map","import { pgTable, text, varchar, numeric, bigint, timestamp, index, uniqueIndex } from \"drizzle-orm/pg-core\";\n\nexport const stories = pgTable(\"stories\", {\n  id: varchar(\"id\", { length: 64 }).primaryKey(),\n  title: text(\"title\").notNull(),\n  summary: text(\"summary\").default(\"\"),\n  host_id: varchar(\"host_id\", { length: 64 }).notNull(),\n  created_at: timestamp(\"created_at\", { withTimezone: true }).defaultNow()\n});\n\nexport const hosts = pgTable(\"hosts\", {\n  id: varchar(\"id\", { length: 64 }).primaryKey(),\n  name: text(\"name\").notNull(),\n  web2_links: text(\"web2_links\").default(\"[]\"),\n  created_at: timestamp(\"created_at\", { withTimezone: true }).defaultNow()\n});\n\nexport const events = pgTable(\"events\", {\n  id: varchar(\"id\", { length: 72 }).primaryKey().$defaultFn(() => crypto.randomUUID()),\n  type: varchar(\"type\", { length: 16 }).notNull(), // \"tip\" | \"airdrop\" | \"guess\" | \"vote\" | \"share\"\n  signer: varchar(\"signer\", { length: 128 }).notNull(),\n  receiver: varchar(\"receiver\", { length: 128 }).notNull(),\n  amount: numeric(\"amount\", { precision: 18, scale: 9 }).default(\"0\"),\n  tx_signature: varchar(\"tx_signature\", { length: 128 }).notNull(),\n  story_id: varchar(\"story_id\", { length: 64 }),\n  timestamp: bigint(\"timestamp\", { mode: \"number\" }).notNull()\n}, (t) => ({\n  byTxType: uniqueIndex(\"uniq_tx_type\").on(t.tx_signature, t.type),\n  byStory: index(\"idx_story\").on(t.story_id)\n}));\n\n// Keep blinkEvents for backward compatibility\nexport const blinkEvents = events;\n\n// Derived host metrics snapshot table\nexport const hostMetrics = pgTable(\"host_metrics\", {\n  host_id: varchar(\"host_id\", { length: 64 }).primaryKey(),\n  total_tip_value_sol: numeric(\"total_tip_value_sol\", { precision: 18, scale: 9 }).default(\"0\"),\n  unique_supporters: numeric(\"unique_supporters\", { precision: 10, scale: 0 }).default(\"0\"),\n  share_count: numeric(\"share_count\", { precision: 10, scale: 0 }).default(\"0\"),\n  stories_count: numeric(\"stories_count\", { precision: 10, scale: 0 }).default(\"0\"),\n  updated_at: timestamp(\"updated_at\", { withTimezone: true }).defaultNow()\n});\n\n// Daily story metrics aggregation for discover page\nexport const storyMetricsDaily = pgTable(\"story_metrics_daily\", {\n  id: varchar(\"id\", { length: 72 }).primaryKey().$defaultFn(() => crypto.randomUUID()),\n  story_id: varchar(\"story_id\", { length: 64 }).notNull(),\n  date: timestamp(\"date\", { withTimezone: true }).notNull(),\n  total_tip_value_sol: numeric(\"total_tip_value_sol\", { precision: 18, scale: 9 }).default(\"0\"),\n  unique_supporters: numeric(\"unique_supporters\", { precision: 10, scale: 0 }).default(\"0\"),\n  share_count: numeric(\"share_count\", { precision: 10, scale: 0 }).default(\"0\"),\n  created_at: timestamp(\"created_at\", { withTimezone: true }).defaultNow()\n}, (t) => ({\n  byStoryDate: uniqueIndex(\"uniq_story_date\").on(t.story_id, t.date),\n  byStory: index(\"idx_story\").on(t.story_id),\n  byDate: index(\"idx_date\").on(t.date)\n}));\n","import { drizzle } from \"drizzle-orm/neon-http\";\nimport { neon } from \"@neondatabase/serverless\";\n\nconst rawUrl = process.env.DATABASE_URL || \"\";\n// Ensure channel_binding=disable in case it's missing\nconst url = rawUrl.includes(\"channel_binding=\") ? rawUrl : (rawUrl + (rawUrl.includes(\"?\") ? \"&\" : \"?\") + \"channel_binding=disable\");\n\nif (!url) {\n  throw new Error(\"DATABASE_URL is not set\");\n}\nconst sql = neon(url);\nexport const db = drizzle(sql);\nexport default db;\n"],"names":["module","exports","require","runtime","GET","hostsList","allStories","allEvents","Promise","all","db","select","from","hosts","stories","events","hostMetrics","Map","host","set","id","total_sol","supporters","Set","shares","stories_count","story","metrics","get","host_id","event","find","s","story_id","type","Number","amount","add","signer","items","map","avatar_url","headline","web2Links","JSON","parse","web2_links","Array","isArray","length","e","name","sort","a","b","NextResponse","json","error","console","status","routeModule","module_compiled","AppRouteRouteModule","definition","kind","route_kind","x","APP_ROUTE","page","pathname","filename","bundlePath","resolvedPagePath","nextConfigOutput","userland","route_namespaceObject","requestAsyncStorage","staticGenerationAsyncStorage","serverHooks","originalPathname","patchFetch","patch_fetch","XH","ComponentMod","route_next_edge_ssr_entry_namespaceObject","next_edge_app_route_loaderabsolutePagePath_private_next_app_dir_2Fapi_2Fcreators_2Froute_ts_page_2Fapi_2Fcreators_2Froute_appDirLoader_bmV4dC1hcHAtbG9hZGVyP25hbWU9YXBwJTJGYXBpJTJGY3JlYXRvcnMlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRmNyZWF0b3JzJTJGcm91dGUmcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZjcmVhdG9ycyUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRmx2eHVhbiUyRmdpdGh1YiUyRlRpcENvbm5lY3QlMkZhcHAmYXBwUGF0aHM9JTJGYXBpJTJGY3JlYXRvcnMlMkZyb3V0ZSZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCE_3D_nextConfigOutput_preferredRegion_middlewareConfig_e30_3D_","edge_route_module_wrapper","wrap","IndexBuilderOn","constructor","unique","entity","Q","on","columns","IndexBuilder","is","it","sql","$s","clonedIndexedColumn","common","pK","keyAsName","columnType","indexConfig","stringify","defaultConfig","onOnly","using","method","config","only","concurrently","with","obj","where","condition","build","table","Index","index","pgTable","varchar","primaryKey","title","text","notNull","summary","default","created_at","timestamp","withTimezone","defaultNow","$defaultFn","crypto","randomUUID","receiver","numeric","precision","scale","tx_signature","bigint","mode","byTxType","uniqueIndex","t","byStory","total_tip_value_sol","unique_supporters","share_count","updated_at","date","byStoryDate","byDate","rawUrl","process","env","DATABASE_URL","url","includes","neon","drizzle"],"sourceRoot":""}