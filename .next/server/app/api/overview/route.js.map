{"version":3,"file":"app/api/overview/route.js","mappings":"oFAAAA,CAAAA,EAAAC,OAAA,CAAAC,QAAA,0CCAAF,CAAAA,EAAAC,OAAA,CAAAC,QAAA,0XCIO,IAAMC,EAAU,OAEhB,eAAeC,IACpB,IAAMC,EAAQC,KAAKC,GAAG,GACtB,GAAI,CAEF,IAAMC,EAAS,MAAMC,EAAAA,EAAEA,CAACC,OAAO,CAACC,CAAAA,EAAAA,EAAAA,EAAAA,CAAG,CAAC;;;;;;IAMpC,CAAC,EAEKC,EAAOJ,EAAOK,IAAI,EAAE,CAAC,EAAE,EAAI,CAC/BC,UAAW,EACXC,WAAY,EACZC,OAAQ,CACV,EAEMC,EAAU,CACdH,UAAWI,OAAON,EAAKE,SAAS,EAAI,GAAGK,OAAO,CAAC,GAC/CJ,WAAYG,OAAON,EAAKG,UAAU,EAAI,GACtCC,OAAQE,OAAON,EAAKI,MAAM,EAAI,EAChC,EAEMI,EAAUd,KAAKC,GAAG,GAAKF,EAU7B,OARAgB,QAAQC,GAAG,CAAC,aAAc,CACxBC,cAAe,SACfC,YAAaJ,EACbN,UAAWG,EAAQH,SAAS,CAC5BC,WAAYE,EAAQF,UAAU,CAC9BC,OAAQC,EAAQD,MAAM,GAGjBS,EAAAA,EAAYA,CAACC,IAAI,CAACT,EAAS,CAChCU,QAAS,CACP,gBAAiB,yCACnB,CACF,EACF,CAAE,MAAOC,EAAY,CAEnB,OADAP,QAAQO,KAAK,CAAC,mBAAoBA,EAAMC,OAAO,EACxCJ,EAAAA,EAAYA,CAACC,IAAI,CACtB,CAAEE,MAAO,+BAAgC,EACzC,CAAEE,OAAQ,GAAI,EAElB,CACF,CC7CA,IAAAC,EAAA,IAAwBC,EAAAC,mBAAmB,EAC3CC,WAAA,CACAC,KAAcC,EAAAC,CAAS,CAAAC,SAAA,CACvBC,KAAA,sBACAC,SAAA,gBACAC,SAAA,QACAC,WAAA,wBACA,EACAC,iBAAA,4DACAC,iBAVA,GAWAC,SAAYC,CACZ,GAIA,CAAQC,oBAAAA,CAAA,CAAAC,6BAAAA,CAAA,CAAAC,YAAAA,CAAA,EAAiElB,EACzEmB,EAAA,sBACA,SAAAC,IACA,MAAW,GAAAC,EAAAC,EAAA,EAAW,CACtBJ,YAAAA,EACAD,6BAAAA,CACA,EACA,CC1BO,IAAAM,EAAqBC,EAC5BC,EAAeC,EAAAC,CAAsB,CAAAC,IAAA,CAAM5B,0ECD3C,IAAM6B,EAASC,QAAQC,GAAG,CAACC,YAAY,EAAI,GAErCC,EAAMJ,EAAOK,QAAQ,CAAC,oBAAsBL,EAAUA,EAAUA,CAAAA,EAAOK,QAAQ,CAAC,KAAO,IAAM,KAAO,0BAE1G,GAAI,CAACD,EACH,MAAM,MAAU,2BAElB,IAAMrD,EAAMuD,CAAAA,EAAAA,EAAAA,EAAAA,EAAKF,GACJvD,EAAK0D,CAAAA,EAAAA,EAAAA,EAAAA,EAAQxD","sources":["webpack://_N_E/external commonjs \"node:async_hooks\"","webpack://_N_E/external commonjs \"node:buffer\"","webpack://_N_E/./app/api/overview/route.ts","webpack://_N_E/./app/api/overview/route.ts?6050","webpack://_N_E/","webpack://_N_E/./lib/db.ts"],"sourcesContent":["module.exports = require(\"node:async_hooks\");","module.exports = require(\"node:buffer\");","import { NextResponse } from \"next/server\";\nimport { db } from \"@/lib/db\";\nimport { sql } from \"drizzle-orm\";\n\nexport const runtime = 'edge';\n\nexport async function GET() {\n  const start = Date.now();\n  try {\n    // Use optimized SQL query for better performance\n    const result = await db.execute(sql`\n      SELECT\n        COALESCE(SUM(CASE WHEN type = 'tip' THEN amount ELSE 0 END), 0) as total_sol,\n        COUNT(DISTINCT CASE WHEN type = 'tip' THEN signer END) as supporters,\n        COUNT(CASE WHEN type = 'share' THEN 1 END) as shares\n      FROM events\n    `);\n\n    const data = result.rows?.[0] ?? {\n      total_sol: 0,\n      supporters: 0,\n      shares: 0\n    };\n\n    const payload = {\n      total_sol: Number(data.total_sol || 0).toFixed(3), // Convert from lamports to SOL\n      supporters: Number(data.supporters || 0),\n      shares: Number(data.shares || 0)\n    };\n\n    const latency = Date.now() - start;\n\n    console.log('[overview]', {\n      table_checked: 'events',\n      duration_ms: latency,\n      total_sol: payload.total_sol,\n      supporters: payload.supporters,\n      shares: payload.shares\n    });\n\n    return NextResponse.json(payload, {\n      headers: {\n        \"Cache-Control\": \"s-maxage=30, stale-while-revalidate=300\"\n      }\n    });\n  } catch (error: any) {\n    console.error('[overview error]', error.message);\n    return NextResponse.json(\n      { error: 'Failed to fetch overview data' },\n      { status: 500 }\n    );\n  }\n}\n","import { AppRouteRouteModule } from \"next/dist/server/future/route-modules/app-route/module.compiled\";\nimport { RouteKind } from \"next/dist/server/future/route-kind\";\nimport { patchFetch as _patchFetch } from \"next/dist/server/lib/patch-fetch\";\nimport * as userland from \"/Users/lvxuan/github/TipConnect/app/api/overview/route.ts\";\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new AppRouteRouteModule({\n    definition: {\n        kind: RouteKind.APP_ROUTE,\n        page: \"/api/overview/route\",\n        pathname: \"/api/overview\",\n        filename: \"route\",\n        bundlePath: \"app/api/overview/route\"\n    },\n    resolvedPagePath: \"/Users/lvxuan/github/TipConnect/app/api/overview/route.ts\",\n    nextConfigOutput,\n    userland\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/overview/route\";\nfunction patchFetch() {\n    return _patchFetch({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\nexport { routeModule, requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, originalPathname, patchFetch,  };\n\n//# sourceMappingURL=app-route.js.map","import { EdgeRouteModuleWrapper } from \"next/dist/server/web/edge-route-module-wrapper\";\n// Import the userland code.\nimport * as module from \"next-app-loader?name=app%2Fapi%2Foverview%2Froute&page=%2Fapi%2Foverview%2Froute&pagePath=private-next-app-dir%2Fapi%2Foverview%2Froute.ts&appDir=%2FUsers%2Flvxuan%2Fgithub%2FTipConnect%2Fapp&appPaths=%2Fapi%2Foverview%2Froute&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!private-next-app-dir/api/overview/route.ts?__next_edge_ssr_entry__\";\nexport const ComponentMod = module;\nexport default EdgeRouteModuleWrapper.wrap(module.routeModule);\n\n//# sourceMappingURL=edge-app-route.js.map","import { drizzle } from \"drizzle-orm/neon-http\";\nimport { neon } from \"@neondatabase/serverless\";\n\nconst rawUrl = process.env.DATABASE_URL || \"\";\n// Ensure channel_binding=disable in case it's missing\nconst url = rawUrl.includes(\"channel_binding=\") ? rawUrl : (rawUrl + (rawUrl.includes(\"?\") ? \"&\" : \"?\") + \"channel_binding=disable\");\n\nif (!url) {\n  throw new Error(\"DATABASE_URL is not set\");\n}\nconst sql = neon(url);\nexport const db = drizzle(sql);\nexport default db;\n"],"names":["module","exports","require","runtime","GET","start","Date","now","result","db","execute","sql","data","rows","total_sol","supporters","shares","payload","Number","toFixed","latency","console","log","table_checked","duration_ms","NextResponse","json","headers","error","message","status","routeModule","module_compiled","AppRouteRouteModule","definition","kind","route_kind","x","APP_ROUTE","page","pathname","filename","bundlePath","resolvedPagePath","nextConfigOutput","userland","route_namespaceObject","requestAsyncStorage","staticGenerationAsyncStorage","serverHooks","originalPathname","patchFetch","patch_fetch","XH","ComponentMod","route_next_edge_ssr_entry_namespaceObject","next_edge_app_route_loaderabsolutePagePath_private_next_app_dir_2Fapi_2Foverview_2Froute_ts_page_2Fapi_2Foverview_2Froute_appDirLoader_bmV4dC1hcHAtbG9hZGVyP25hbWU9YXBwJTJGYXBpJTJGb3ZlcnZpZXclMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRm92ZXJ2aWV3JTJGcm91dGUmcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZvdmVydmlldyUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRmx2eHVhbiUyRmdpdGh1YiUyRlRpcENvbm5lY3QlMkZhcHAmYXBwUGF0aHM9JTJGYXBpJTJGb3ZlcnZpZXclMkZyb3V0ZSZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCE_3D_nextConfigOutput_preferredRegion_middlewareConfig_e30_3D_","edge_route_module_wrapper","a","wrap","rawUrl","process","env","DATABASE_URL","url","includes","neon","drizzle"],"sourceRoot":""}