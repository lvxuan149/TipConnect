{"version":3,"file":"app/api/discover/route.js","mappings":"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","sources":["webpack://_N_E/external commonjs \"node:async_hooks\"","webpack://_N_E/external commonjs \"node:buffer\"","webpack://_N_E/./app/api/discover/route.ts","webpack://_N_E/./app/api/discover/route.ts?5017","webpack://_N_E/?340c","webpack://_N_E/./node_modules/.pnpm/drizzle-orm@0.36.4_@neondatabase+serverless@0.10.4_@types+pg@8.11.6_react@18.2.0/node_modules/drizzle-orm/pg-core/indexes.js","webpack://_N_E/./drizzle/schema.ts","webpack://_N_E/./lib/db.ts"],"sourcesContent":["module.exports = require(\"node:async_hooks\");","module.exports = require(\"node:buffer\");","import { NextResponse } from \"next/server\";\nimport { db } from \"@/lib/db\";\nimport { stories, hosts, events } from \"@/drizzle/schema\";\n\nexport const runtime = 'edge';\n\ninterface DiscoverQueryParams {\n  limit?: string;\n  offset?: string;\n  sort?: 'trending' | 'newest' | 'total_sol';\n  min_sol?: string;\n}\n\nexport async function GET(request: Request) {\n  const startTime = Date.now();\n\n  try {\n    // Parse query parameters - use fallback URL to avoid static generation issues\n    const url = new URL(request.url || 'http://localhost:3000/api/discover');\n    const searchParams = url.searchParams;\n    const limit = Math.min(Number(searchParams.get('limit') || '20'), 100);\n    const offset = Math.max(Number(searchParams.get('offset') || '0'), 0);\n    const sort = searchParams.get('sort') as DiscoverQueryParams['sort'] || 'trending';\n    const minSol = Number(searchParams.get('min_sol') || '0');\n\n    // Get all stories (events are handled at story level)\n    const [storiesList, hostsList] = await Promise.all([\n      db.select().from(stories),\n      db.select().from(hosts)\n    ]);\n\n    // Create host lookup map\n    const hostMap = new Map();\n    for (const host of hostsList) {\n      hostMap.set(host.id, host);\n    }\n\n    // Calculate metrics for each story\n    const storiesWithMetrics = storiesList.map(story => {\n      // For now, use placeholder metrics - in real implementation these would come from story_metrics_daily\n      const totalSol = Math.random() * 10; // Random for demo\n      const supporters = Math.floor(Math.random() * 5) + 1;\n      const shares = Math.floor(Math.random() * 3);\n\n      const host = hostMap.get(story.host_id);\n\n      return {\n        id: story.id,\n        title: story.title,\n        summary: story.summary,\n        host: {\n          id: host?.id || story.host_id,\n          name: host?.name || 'Unknown',\n          avatar_url: (host as any)?.avatar_url || \"\"\n        },\n        metrics: {\n          total_sol: Number(totalSol.toFixed(2)),\n          supporters,\n          shares\n        },\n        created_at: story.created_at,\n        // Sort key for trending calculation\n        trending_score: totalSol * (1 + shares * 0.1 + supporters * 0.05)\n      };\n    });\n\n    // Filter by minimum SOL if specified\n    const filteredStories = storiesWithMetrics.filter(story =>\n      story.metrics.total_sol >= minSol\n    );\n\n    // Sort stories\n    const sortedStories = [...filteredStories].sort((a, b) => {\n      switch (sort) {\n        case 'trending':\n          return b.trending_score - a.trending_score;\n        case 'newest':\n          return (b.created_at ? new Date(b.created_at).getTime() : 0) - (a.created_at ? new Date(a.created_at).getTime() : 0);\n        case 'total_sol':\n          return b.metrics.total_sol - a.metrics.total_sol;\n        default:\n          return b.trending_score - a.trending_score;\n      }\n    });\n\n    // Apply pagination\n    const paginatedStories = sortedStories.slice(offset, offset + limit);\n\n    const response = {\n      items: paginatedStories,\n      pagination: {\n        limit,\n        offset,\n        total: filteredStories.length,\n        has_more: offset + limit < filteredStories.length\n      },\n      meta: {\n        processed_count: storiesList.length,\n        latency_ms: Date.now() - startTime\n      }\n    };\n\n    console.log('Discover API:', JSON.stringify({\n      path: '/api/discover',\n      query: Object.fromEntries(searchParams),\n      result_count: response.items.length,\n      total_available: response.pagination.total,\n      latency_ms: response.meta.latency_ms\n    }));\n\n    return NextResponse.json(response);\n  } catch (error) {\n    console.error('Discover API error:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch discover stories' },\n      { status: 500 }\n    );\n  }\n}\n","import { AppRouteRouteModule } from \"next/dist/server/future/route-modules/app-route/module.compiled\";\nimport { RouteKind } from \"next/dist/server/future/route-kind\";\nimport { patchFetch as _patchFetch } from \"next/dist/server/lib/patch-fetch\";\nimport * as userland from \"/Users/lvxuan/github/TipConnect/app/api/discover/route.ts\";\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new AppRouteRouteModule({\n    definition: {\n        kind: RouteKind.APP_ROUTE,\n        page: \"/api/discover/route\",\n        pathname: \"/api/discover\",\n        filename: \"route\",\n        bundlePath: \"app/api/discover/route\"\n    },\n    resolvedPagePath: \"/Users/lvxuan/github/TipConnect/app/api/discover/route.ts\",\n    nextConfigOutput,\n    userland\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/discover/route\";\nfunction patchFetch() {\n    return _patchFetch({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\nexport { routeModule, requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, originalPathname, patchFetch,  };\n\n//# sourceMappingURL=app-route.js.map","import { EdgeRouteModuleWrapper } from \"next/dist/server/web/edge-route-module-wrapper\";\n// Import the userland code.\nimport * as module from \"next-app-loader?name=app%2Fapi%2Fdiscover%2Froute&page=%2Fapi%2Fdiscover%2Froute&pagePath=private-next-app-dir%2Fapi%2Fdiscover%2Froute.ts&appDir=%2FUsers%2Flvxuan%2Fgithub%2FTipConnect%2Fapp&appPaths=%2Fapi%2Fdiscover%2Froute&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!private-next-app-dir/api/discover/route.ts?__next_edge_ssr_entry__\";\nexport const ComponentMod = module;\nexport default EdgeRouteModuleWrapper.wrap(module.routeModule);\n\n//# sourceMappingURL=edge-app-route.js.map","import { SQL } from \"../sql/sql.js\";\nimport { entityKind, is } from \"../entity.js\";\nimport { IndexedColumn } from \"./columns/index.js\";\nclass IndexBuilderOn {\n  constructor(unique, name) {\n    this.unique = unique;\n    this.name = name;\n  }\n  static [entityKind] = \"PgIndexBuilderOn\";\n  on(...columns) {\n    return new IndexBuilder(\n      columns.map((it) => {\n        if (is(it, SQL)) {\n          return it;\n        }\n        it = it;\n        const clonedIndexedColumn = new IndexedColumn(it.name, !!it.keyAsName, it.columnType, it.indexConfig);\n        it.indexConfig = JSON.parse(JSON.stringify(it.defaultConfig));\n        return clonedIndexedColumn;\n      }),\n      this.unique,\n      false,\n      this.name\n    );\n  }\n  onOnly(...columns) {\n    return new IndexBuilder(\n      columns.map((it) => {\n        if (is(it, SQL)) {\n          return it;\n        }\n        it = it;\n        const clonedIndexedColumn = new IndexedColumn(it.name, !!it.keyAsName, it.columnType, it.indexConfig);\n        it.indexConfig = it.defaultConfig;\n        return clonedIndexedColumn;\n      }),\n      this.unique,\n      true,\n      this.name\n    );\n  }\n  /**\n   * Specify what index method to use. Choices are `btree`, `hash`, `gist`, `spgist`, `gin`, `brin`, or user-installed access methods like `bloom`. The default method is `btree.\n   *\n   * If you have the `pg_vector` extension installed in your database, you can use the `hnsw` and `ivfflat` options, which are predefined types.\n   *\n   * **You can always specify any string you want in the method, in case Drizzle doesn't have it natively in its types**\n   *\n   * @param method The name of the index method to be used\n   * @param columns\n   * @returns\n   */\n  using(method, ...columns) {\n    return new IndexBuilder(\n      columns.map((it) => {\n        if (is(it, SQL)) {\n          return it;\n        }\n        it = it;\n        const clonedIndexedColumn = new IndexedColumn(it.name, !!it.keyAsName, it.columnType, it.indexConfig);\n        it.indexConfig = JSON.parse(JSON.stringify(it.defaultConfig));\n        return clonedIndexedColumn;\n      }),\n      this.unique,\n      true,\n      this.name,\n      method\n    );\n  }\n}\nclass IndexBuilder {\n  static [entityKind] = \"PgIndexBuilder\";\n  /** @internal */\n  config;\n  constructor(columns, unique, only, name, method = \"btree\") {\n    this.config = {\n      name,\n      columns,\n      unique,\n      only,\n      method\n    };\n  }\n  concurrently() {\n    this.config.concurrently = true;\n    return this;\n  }\n  with(obj) {\n    this.config.with = obj;\n    return this;\n  }\n  where(condition) {\n    this.config.where = condition;\n    return this;\n  }\n  /** @internal */\n  build(table) {\n    return new Index(this.config, table);\n  }\n}\nclass Index {\n  static [entityKind] = \"PgIndex\";\n  config;\n  constructor(config, table) {\n    this.config = { ...config, table };\n  }\n}\nfunction index(name) {\n  return new IndexBuilderOn(false, name);\n}\nfunction uniqueIndex(name) {\n  return new IndexBuilderOn(true, name);\n}\nexport {\n  Index,\n  IndexBuilder,\n  IndexBuilderOn,\n  index,\n  uniqueIndex\n};\n//# sourceMappingURL=indexes.js.map","import { pgTable, text, varchar, numeric, bigint, timestamp, index, uniqueIndex } from \"drizzle-orm/pg-core\";\n\nexport const stories = pgTable(\"stories\", {\n  id: varchar(\"id\", { length: 64 }).primaryKey(),\n  title: text(\"title\").notNull(),\n  summary: text(\"summary\").default(\"\"),\n  host_id: varchar(\"host_id\", { length: 64 }).notNull(),\n  created_at: timestamp(\"created_at\", { withTimezone: true }).defaultNow()\n});\n\nexport const hosts = pgTable(\"hosts\", {\n  id: varchar(\"id\", { length: 64 }).primaryKey(),\n  name: text(\"name\").notNull(),\n  web2_links: text(\"web2_links\").default(\"[]\"),\n  created_at: timestamp(\"created_at\", { withTimezone: true }).defaultNow()\n});\n\nexport const events = pgTable(\"events\", {\n  id: varchar(\"id\", { length: 72 }).primaryKey().$defaultFn(() => crypto.randomUUID()),\n  type: varchar(\"type\", { length: 16 }).notNull(), // \"tip\" | \"airdrop\" | \"guess\" | \"vote\" | \"share\"\n  signer: varchar(\"signer\", { length: 128 }).notNull(),\n  receiver: varchar(\"receiver\", { length: 128 }).notNull(),\n  amount: numeric(\"amount\", { precision: 18, scale: 9 }).default(\"0\"),\n  tx_signature: varchar(\"tx_signature\", { length: 128 }).notNull(),\n  story_id: varchar(\"story_id\", { length: 64 }),\n  timestamp: bigint(\"timestamp\", { mode: \"number\" }).notNull()\n}, (t) => ({\n  byTxType: uniqueIndex(\"uniq_tx_type\").on(t.tx_signature, t.type),\n  byStory: index(\"idx_story\").on(t.story_id)\n}));\n\n// Keep blinkEvents for backward compatibility\nexport const blinkEvents = events;\n\n// Derived host metrics snapshot table\nexport const hostMetrics = pgTable(\"host_metrics\", {\n  host_id: varchar(\"host_id\", { length: 64 }).primaryKey(),\n  total_tip_value_sol: numeric(\"total_tip_value_sol\", { precision: 18, scale: 9 }).default(\"0\"),\n  unique_supporters: numeric(\"unique_supporters\", { precision: 10, scale: 0 }).default(\"0\"),\n  share_count: numeric(\"share_count\", { precision: 10, scale: 0 }).default(\"0\"),\n  stories_count: numeric(\"stories_count\", { precision: 10, scale: 0 }).default(\"0\"),\n  updated_at: timestamp(\"updated_at\", { withTimezone: true }).defaultNow()\n});\n\n// Daily story metrics aggregation for discover page\nexport const storyMetricsDaily = pgTable(\"story_metrics_daily\", {\n  id: varchar(\"id\", { length: 72 }).primaryKey().$defaultFn(() => crypto.randomUUID()),\n  story_id: varchar(\"story_id\", { length: 64 }).notNull(),\n  date: timestamp(\"date\", { withTimezone: true }).notNull(),\n  total_tip_value_sol: numeric(\"total_tip_value_sol\", { precision: 18, scale: 9 }).default(\"0\"),\n  unique_supporters: numeric(\"unique_supporters\", { precision: 10, scale: 0 }).default(\"0\"),\n  share_count: numeric(\"share_count\", { precision: 10, scale: 0 }).default(\"0\"),\n  created_at: timestamp(\"created_at\", { withTimezone: true }).defaultNow()\n}, (t) => ({\n  byStoryDate: uniqueIndex(\"uniq_story_date\").on(t.story_id, t.date),\n  byStory: index(\"idx_story\").on(t.story_id),\n  byDate: index(\"idx_date\").on(t.date)\n}));\n","import { drizzle } from \"drizzle-orm/neon-http\";\nimport { neon } from \"@neondatabase/serverless\";\n\nconst rawUrl = process.env.DATABASE_URL || \"\";\n// Ensure channel_binding=disable in case it's missing\nconst url = rawUrl.includes(\"channel_binding=\") ? rawUrl : (rawUrl + (rawUrl.includes(\"?\") ? \"&\" : \"?\") + \"channel_binding=disable\");\n\nif (!url) {\n  throw new Error(\"DATABASE_URL is not set\");\n}\nconst sql = neon(url);\nexport const db = drizzle(sql);\nexport default db;\n"],"names":["module","exports","require","runtime","GET","request","startTime","Date","now","searchParams","url","URL","limit","Math","min","Number","get","offset","max","sort","minSol","storiesList","hostsList","Promise","all","db","select","from","stories","hosts","hostMap","Map","host","set","id","filteredStories","storiesWithMetrics","map","story","totalSol","random","supporters","floor","shares","host_id","title","summary","name","avatar_url","metrics","total_sol","toFixed","created_at","trending_score","filter","response","items","sortedStories","a","b","getTime","slice","pagination","total","length","has_more","meta","processed_count","latency_ms","console","log","JSON","stringify","path","query","Object","fromEntries","result_count","total_available","NextResponse","json","error","status","routeModule","module_compiled","AppRouteRouteModule","definition","kind","route_kind","x","APP_ROUTE","page","pathname","filename","bundlePath","resolvedPagePath","nextConfigOutput","userland","route_namespaceObject","requestAsyncStorage","staticGenerationAsyncStorage","serverHooks","originalPathname","patchFetch","patch_fetch","XH","ComponentMod","route_next_edge_ssr_entry_namespaceObject","next_edge_app_route_loaderabsolutePagePath_private_next_app_dir_2Fapi_2Fdiscover_2Froute_ts_page_2Fapi_2Fdiscover_2Froute_appDirLoader_bmV4dC1hcHAtbG9hZGVyP25hbWU9YXBwJTJGYXBpJTJGZGlzY292ZXIlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRmRpc2NvdmVyJTJGcm91dGUmcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZkaXNjb3ZlciUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRmx2eHVhbiUyRmdpdGh1YiUyRlRpcENvbm5lY3QlMkZhcHAmYXBwUGF0aHM9JTJGYXBpJTJGZGlzY292ZXIlMkZyb3V0ZSZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCE_3D_nextConfigOutput_preferredRegion_middlewareConfig_e30_3D_","edge_route_module_wrapper","wrap","IndexBuilderOn","constructor","unique","entity","Q","on","columns","IndexBuilder","is","it","sql","$s","clonedIndexedColumn","common","pK","keyAsName","columnType","indexConfig","parse","defaultConfig","onOnly","using","method","config","only","concurrently","with","obj","where","condition","build","table","Index","index","pgTable","varchar","primaryKey","text","notNull","default","timestamp","withTimezone","defaultNow","web2_links","events","$defaultFn","crypto","randomUUID","type","signer","receiver","amount","numeric","precision","scale","tx_signature","story_id","bigint","mode","byTxType","uniqueIndex","t","byStory","total_tip_value_sol","unique_supporters","share_count","stories_count","updated_at","date","byStoryDate","byDate","rawUrl","process","env","DATABASE_URL","includes","neon","drizzle"],"sourceRoot":""}