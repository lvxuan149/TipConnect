{"session_id":"019a2401-2c74-7ff0-bc05-026f08b4ba54","ts":1761540726,"text":"\n## User Input\n\n```text\n\n```\n\nYou **MUST** consider the user input before proceeding (if not empty).\n\n## Outline\n\nYou are updating the project constitution at `.specify/memory/constitution.md`. This file is a TEMPLATE containing placeholder tokens in square brackets (e.g. `[PROJECT_NAME]`, `[PRINCIPLE_1_NAME]`). Your job is to (a) collect/derive concrete values, (b) fill the template precisely, and (c) propagate any amendments across dependent artifacts.\n\nFollow this execution flow:\n\n1. Load the existing constitution template at `.specify/memory/constitution.md`.\n   - Identify every placeholder token of the form `[ALL_CAPS_IDENTIFIER]`.\n   **IMPORTANT**: The user might require less or more principles than the ones used in the template. If a number is specified, respect that - follow the general template. You will update the doc accordingly.\n\n2. Collect/derive values for placeholders:\n   - If user input (conversation) supplies a value, use it.\n   - Otherwise infer from existing repo context (README, docs, prior constitution versions if embedded).\n   - For governance dates: `RATIFICATION_DATE` is the original adoption date (if unknown ask or mark TODO), `LAST_AMENDED_DATE` is today if changes are made, otherwise keep previous.\n   - `CONSTITUTION_VERSION` must increment according to semantic versioning rules:\n     - MAJOR: Backward incompatible governance/principle removals or redefinitions.\n     - MINOR: New principle/section added or materially expanded guidance.\n     - PATCH: Clarifications, wording, typo fixes, non-semantic refinements.\n   - If version bump type ambiguous, propose reasoning before finalizing.\n\n3. Draft the updated constitution content:\n   - Replace every placeholder with concrete text (no bracketed tokens left except intentionally retained template slots that the project has chosen not to define yet—explicitly justify any left).\n   - Preserve heading hierarchy and comments can be removed once replaced unless they still add clarifying guidance.\n   - Ensure each Principle section: succinct name line, paragraph (or bullet list) capturing non‑negotiable rules, explicit rationale if not obvious.\n   - Ensure Governance section lists amendment procedure, versioning policy, and compliance review expectations.\n\n4. Consistency propagation checklist (convert prior checklist into active validations):\n   - Read `.specify/templates/plan-template.md` and ensure any \"Constitution Check\" or rules align with updated principles.\n   - Read `.specify/templates/spec-template.md` for scope/requirements alignment—update if constitution adds/removes mandatory sections or constraints.\n   - Read `.specify/templates/tasks-template.md` and ensure task categorization reflects new or removed principle-driven task types (e.g., observability, versioning, testing discipline).\n   - Read each command file in `.specify/templates/commands/*.md` (including this one) to verify no outdated references (agent-specific names like CLAUDE only) remain when generic guidance is required.\n   - Read any runtime guidance docs (e.g., `README.md`, `docs/quickstart.md`, or agent-specific guidance files if present). Update references to principles changed.\n\n5. Produce a Sync Impact Report (prepend as an HTML comment at top of the constitution file after update):\n   - Version change: old → new\n   - List of modified principles (old title → new title if renamed)\n   - Added sections\n   - Removed sections\n   - Templates requiring updates (✅ updated / ⚠ pending) with file paths\n   - Follow-up TODOs if any placeholders intentionally deferred.\n\n6. Validation before final output:\n   - No remaining unexplained bracket tokens.\n   - Version line matches report.\n   - Dates ISO format YYYY-MM-DD.\n   - Principles are declarative, testable, and free of vague language (\"should\" → replace with MUST/SHOULD rationale where appropriate).\n\n7. Write the completed constitution back to `.specify/memory/constitution.md` (overwrite).\n\n8. Output a final summary to the user with:\n   - New version and bump rationale.\n   - Any files flagged for manual follow-up.\n   - Suggested commit message (e.g., `docs: amend constitution to vX.Y.Z (principle additions + governance update)`).\n\nFormatting & Style Requirements:\n\n- Use Markdown headings exactly as in the template (do not demote/promote levels).\n- Wrap long rationale lines to keep readability (<100 chars ideally) but do not hard enforce with awkward breaks.\n- Keep a single blank line between sections.\n- Avoid trailing whitespace.\n\nIf the user supplies partial updates (e.g., only one principle revision), still perform validation and version decision steps.\n\nIf critical info missing (e.g., ratification date truly unknown), insert `TODO(<FIELD_NAME>): explanation` and include in the Sync Impact Report under deferred items.\n\nDo not create a new template; always operate on the existing `.specify/memory/constitution.md` file.\n"}
{"session_id":"019a2405-639d-7192-9317-3a5f50dec49d","ts":1761541024,"text":"specify --help"}
{"session_id":"019a2405-639d-7192-9317-3a5f50dec49d","ts":1761541185,"text":"/prompts:speckit.constitution \n\n# **TipConnect-PPT-word v0.2**\n\n\n\n\n\n------\n\n\n\n\n\n## **🪩** \n\n## **Banner**\n\n\n\n\n\n- **TipConnect**\n- **The First On-chain Gratitude Protocol for Social Payments**\n- **Turn your Gratitude into Social Capital.**\n\n\n\n\n\n------\n\n\n\n\n\n## **💔** \n\n## **Problem：感谢无处沉淀**\n\n\n\n\n\n我们发现一个长期存在却无人解决的问题——\n\n**在互联网时代，“感谢”是短暂的。**\n\n\n\n线上点赞、评论、表情——都在瞬间被遗忘。\n\n线下活动虽然丰富，却停留在 **签到、打卡、任务** 层面。\n\n\n\n> 活动结束那一刻，情感断裂，声誉无法积累。\n\n\n\n主理人、组织者收获了感谢，却无法验证和沉淀。\n\n参与者表达感谢，却无法被看见。\n\n整个社交网络，缺少**可积累的社会资本层**。\n\n\n\n------\n\n\n\n\n\n## **🌈** \n\n## **TipConnect的改变：让“感谢”可追踪、可传播、可积累**\n\n\n\n\n\n我们重新定义了“感谢”的价值：\n\n\n\n- 🔍 **Web2 的感谢无处沉淀** → 我们让每一次感谢都上链、签名并生成可视化声誉。\n- 💰 **Web3 的交易缺乏情感语义** → 我们为链上交易注入情感与故事，生成传播故事卡片。\n- 🧠 **AI 无法识别真实人际信任** → 我们建立 **Social Capital Graph**，让AI识别人类间的真实信任。\n\n\n\n\n\n> 从“表达感谢”，到“积累信任”，再到“形成可追踪的社交资本”。\n\n\n\n------\n\n\n\n\n\n## **📈** \n\n## **Market：TipConnect 位于 4 个高速增长的交叉市场**\n\n\n\n| **领域**                            | **市场规模 / 潜力** | **增长驱动力**                               |\n| ----------------------------------- | ------------------- | -------------------------------------------- |\n| 🌐 **Social Payments（社交支付）**   | $350B+ 全球市场     | Z世代与创作者经济崛起，情感支付成为常态      |\n| 🎟 **Offline Events（线下聚会）**    | 年均1亿+场          | 组织方需要沉淀声誉、验证贡献                 |\n| 💫 **Creator Economy（创作者经济）** | $250B+ 市场         | 创作者寻求与粉丝直接连接的经济激励层         |\n| ⚡ **Solana Consumer dApps**         | 飞速增长中          | Blink 成为 Web3 新交互标准，消费者习惯被重塑 |\n\n> **“感谢”正成为 AI 时代的支付原语（New Payment Primitive）。**\n\n\n\n------\n\n\n\n\n\n## **💡** \n\n## **TipConnect 解决方案**\n\n\n\n\n\nTipConnect 是一个让“感谢”具备价值与传播力的链上协议。\n\n| **角色**                   | **痛点**                     | **TipConnect 带来的新体验**                                  |\n| -------------------------- | ---------------------------- | ------------------------------------------------------------ |\n| 🧑‍💼 **活动主理人**          | 活动后无法沉淀情感价值与声誉 | 一键生成“感谢页面”Story Card，让参与者链上打赏与传播         |\n| 👥 **参与者**               | 想表达感谢但缺少低门槛方式   | 直接点击 Story Card，在 Blink 内完成打赏，无需钱包           |\n| 🤖 **AI 助理 / Bot 组织者** | 无法触发真实经济行为         | ChatGPT Embedded Tip Agent，可在 AI 对话中直接触发感谢与支付 |\n| 💰 **品牌 / 平台方**        | 缺乏可验证的社交影响力指标   | Dashboard 展示透明数据（SOL / Supporters / Shares）          |\n\n\n\n------\n\n\n\n\n\n## **⚙️** \n\n## **核心功能模块**\n\n\n\n| **模块**                     | **功能亮点**                                |\n| ---------------------------- | ------------------------------------------- |\n| 💰 **On-chain Gratitude Tip** | Solana Blinks 一键打赏，上链可查可验证      |\n| 🧾 **Reputation Dashboard**   | 聚合 SOL 金额、支持者数、分享数，实时可视化 |\n| 🌐 **Web2 / Web3 融合**       | 支持嵌入 Twitter / Telegram / ChatGPT       |\n| 🤖 **AI Plugin Layer**        | 打赏可直接在 AI 对话中触发，自动更新声誉    |\n| 📣 **Story Engine**           | 自动生成可传播的“感谢故事卡”，形成传播链路  |\n\n> 每一次打赏，都是一个“可传播的社交故事单元”。\n\n\n\n------\n\n\n\n\n\n## **🧬** \n\n## **TipConnect 技术架构**\n\n\n\n| **层级**           | **功能**                                | **技术栈**                          |\n| ------------------ | --------------------------------------- | ----------------------------------- |\n| **AI Layer**       | ChatGPT Embedded Tip Agent 识别感谢语义 | OpenAI Actions / Webhooks           |\n| **Social Layer**   | Blinks Story Card 一键传播              | Solana Blinks SDK                   |\n| **Payment Layer**  | 稳定币打赏与结算                        | Reflect Stablecoin API              |\n| **Identity Layer** | 钱包抽象与社交登录                      | Dynamic SDK + Solana Wallet Adapter |\n| **Data Layer**     | 聚合活动与声誉数据                      | Neon Postgres + Drizzle ORM         |\n\n> 从语义识别 → Blink触发 → 链上支付 → 声誉积累，全栈自动闭环。\n\n\n\n------\n\n\n\n\n\n## **🔄** \n\n## **社交打赏飞轮：Gratitude → Reputation → Transparency → Propagation**\n\n\n\n\n\n\n\n### **1️⃣ Gratitude → Action**\n\n\n\n\n\n用户在 X / ChatGPT / Solana Mobile 发起 Tip\n\nReflect API 生成稳定币交易，Dynamic SDK 无钱包签名\n\n\n\n\n\n### **2️⃣ Action → Reputation**\n\n\n\n\n\n每笔交易上链\n\n主理人 Dashboard 实时显示 💰SOL｜👥支持者｜��分享\n\n\n\n\n\n### **3️⃣ Reputation → Transparency**\n\n\n\n\n\n链上透明度公开\n\n协议聚合统计，形成信任与影响力的量化指标\n\n\n\n\n\n### **4️⃣ Transparency → Propagation**\n\n\n\n\n\nStory Card 一键分享到 X / Telegram\n\n可交互 Blinks 提升传播转化率\n\n\n\n> 打赏即故事，传播即增长。\n\n\n\n------\n\n\n\n\n\n## **🧭** \n\n## **TipConnect 体验哲学：Entry = Interaction**\n\n\n\n\n\n**入口即体验，互动即上链。**\n\n| **模块**           | **功能说明**                               | **技术支撑**                   |\n| ------------------ | ------------------------------------------ | ------------------------------ |\n| 🧩 **多入口融合**   | Blinks / ChatGPT / Mobile 入口均可触发打赏 | Blinks SDK + ChatGPT Actions   |\n| 💳 **钱包无感上链** | Dynamic SDK 实现 Walletless Onboarding     | Dynamic SDK                    |\n| 💰 **稳定币结算**   | Reflect API 提供稳定支付                   | Reflect Money API + Helius RPC |\n| 🧾 **链上故事生成** | 自动生成 Story Card，可传播验证            | Story Engine                   |\n\n> 用户只需“表达感谢”，剩下的交给 TipConnect。\n\n\n\n------\n\n\n\n\n\n## **✅** \n\n## **TipConnect目前完成了什么**\n\n\n\n\n\n- 🌐 完成前端 MVP：/discover、/story、/creators 主路径\n- 💫 实现链上 Tip 上链 + 签名验证 + 实时声誉聚合\n- 📊 全局概览接口 /api/overview （total_SOL / supporters / shares）已上线\n- 🔗 集成 Reflect API + Solana Wallet Adapter\n- 💻 已部署 Vercel + Neon Postgres + Helius RPC 全链路闭环\n- 🔍 Demo：[**app.tipconnect.xyz**](https://app.tipconnect.xyz)\n\n\n\n\n\n------\n\n\n\n\n\n## **🔗** \n\n## **为什么选择 Solana**\n\n\n\n\n\n- ⚡ **高速低费**：Blink 瞬签体验媲美 Web2\n- 🔍 **链上透明**：每笔交易可验证\n- 🧱 **开放生态**：Reflect、Helius、Dynamic 无缝集成\n- 🌍 **全球社区**：活跃的创作者与消费者应用生态\n\n\n\n\n\n> Solana 是“社交支付协议”的理想底层。\n\n\n\n------\n\n\n\n\n\n## **💎** \n\n## **TipConnect 为什么独特**\n\n\n\n| **对比维度** | **Web2 平台** | **传统 Web3 打赏** | **TipConnect**      |\n| ------------ | ------------- | ------------------ | ------------------- |\n| 是否上链     | ❌ 否          | ✅ 是               | ✅ 是                |\n| 是否可传播   | ❌ 否          | ⚠️ 有限             | ✅ 内置 Story Engine |\n| 是否积累声誉 | ❌ 平台垄断    | ⚠️ 分散             | ✅ 协议级 Reputation |\n| 是否一键体验 | ❌ 多跳流程    | ⚠️ 手动复杂         | ✅ Blink 即签即用    |\n\n> TipConnect 是“情感经济 + 链上透明 + AI交互”的第一协议。\n\n\n\n------\n\n\n\n\n\n## **🌍** \n\n## **Go-To-Market 策略**\n\n\n\n| **阶段**    | **目标**         | **举措**                     |\n| ----------- | ---------------- | ---------------------------- |\n| **Phase 1** | Hackathon 验证   | 发布 MVP，展示社交打赏闭环   |\n| **Phase 2** | Creator Launch   | 对接 Telegram / X 社群主理人 |\n| **Phase 3** | CommunityFi 扩展 | 结合线下聚会、DAO、品牌活动  |\n\n> 从开发者 → 创作者 → 社区 → 消费者，逐步扩散。\n\n\n\n------\n\n\n\n\n\n## **💰** \n\n## **商业模式**\n\n\n\n\n\n- 💵 **Protocol Fee**：每笔 Tip 收取 0.5–1% 协议手续费\n- �� **Creator Dashboard SaaS**：主理人订阅制管理工具\n- 🔍 **Reputation API**：为其他协议提供信任评分层\n\n\n\n\n\n> 从“感谢”出发，重塑社交金融的新基建。\n\n\n\n------\n\n\n\n\n\n## **🌠** \n\n## **未来拓展方向**\n\n\n\n| **模块**                          | **描述**                     |\n| --------------------------------- | ---------------------------- |\n| 🤖 **AI Reputation Layer**         | AI 代理也能被感谢、积累声誉  |\n| 📈 **Host Analytics**              | 主理人查看热力图、传播链路   |\n| �� **Offline Gratitude**           | NFC / QR 打赏，线下上链      |\n| 💫 **Social Capital Tokenization** | 将感谢分资产化，形成声誉代币 |\n\n> 从感谢 → 声誉 → 资产，构建全新社会资本市场。\n\n\n\n------\n\n\n\n\n\n## **👥** \n\n## **团队介绍**\n\n\n\n\n\nTipConnect 团队来自 **Solana、OKX、Binance Labs、AI 工具链创业公司**，\n\n兼具 **AI 技术、区块链工程与社交产品经验**。\n\n核心成员多次在 **Solana Hackathon** 获奖，\n\n持续探索 **AI × Web3 社交融合的边界。**\n\n\n\n------\n\n\n\n\n\n## **✨** \n\n## **结语**\n\n\n\n\n\n**TipConnect = 感谢的金融化、信任的可视化、社交的再发明。**\n\n\n\n> **Tip, Connect, Together.**\n\n> **Turn your Gratitude into Social Capital.**\n\n 这是我的PPT 介绍，哪些实现了，哪些没实现 "}
{"session_id":"019a2405-639d-7192-9317-3a5f50dec49d","ts":1761542551,"text":"\n## User Input\n\n```text\nPhase 2:Phase 2: 链上打赏与Webhook → Reflect API → Helius验证 ,优先补齐Solana交易验证与Reflect稳定币API,Dynamic SDK\n```\n\nYou **MUST** consider the user input before proceeding (if not empty).\n\n## Outline\n\n1. **Setup**: Run `.specify/scripts/bash/setup-plan.sh --json` from repo root and parse JSON for FEATURE_SPEC, IMPL_PLAN, SPECS_DIR, BRANCH. For single quotes in args like \"I'm Groot\", use escape syntax: e.g 'I'\\''m Groot' (or double-quote if possible: \"I'm Groot\").\n\n2. **Load context**: Read FEATURE_SPEC and `.specify/memory/constitution.md`. Load IMPL_PLAN template (already copied).\n\n3. **Execute plan workflow**: Follow the structure in IMPL_PLAN template to:\n   - Fill Technical Context (mark unknowns as \"NEEDS CLARIFICATION\")\n   - Fill Constitution Check section from constitution\n   - Evaluate gates (ERROR if violations unjustified)\n   - Phase 0: Generate research.md (resolve all NEEDS CLARIFICATION)\n   - Phase 1: Generate data-model.md, contracts/, quickstart.md\n   - Phase 1: Update agent context by running the agent script\n   - Re-evaluate Constitution Check post-design\n\n4. **Stop and report**: Command ends after Phase 2 planning. Report branch, IMPL_PLAN path, and generated artifacts.\n\n## Phases\n\n### Phase 0: Outline & Research\n\n1. **Extract unknowns from Technical Context** above:\n   - For each NEEDS CLARIFICATION → research task\n   - For each dependency → best practices task\n   - For each integration → patterns task\n\n2. **Generate and dispatch research agents**:\n\n   ```text\n   For each unknown in Technical Context:\n     Task: \"Research {unknown} for {feature context}\"\n   For each technology choice:\n     Task: \"Find best practices for {tech} in {domain}\"\n   ```\n\n3. **Consolidate findings** in `research.md` using format:\n   - Decision: [what was chosen]\n   - Rationale: [why chosen]\n   - Alternatives considered: [what else evaluated]\n\n**Output**: research.md with all NEEDS CLARIFICATION resolved\n\n### Phase 1: Design & Contracts\n\n**Prerequisites:** `research.md` complete\n\n1. **Extract entities from feature spec** → `data-model.md`:\n   - Entity name, fields, relationships\n   - Validation rules from requirements\n   - State transitions if applicable\n\n2. **Generate API contracts** from functional requirements:\n   - For each user action → endpoint\n   - Use standard REST/GraphQL patterns\n   - Output OpenAPI/GraphQL schema to `/contracts/`\n\n3. **Agent context update**:\n   - Run `.specify/scripts/bash/update-agent-context.sh codex`\n   - These scripts detect which AI agent is in use\n   - Update the appropriate agent-specific context file\n   - Add only new technology from current plan\n   - Preserve manual additions between markers\n\n**Output**: data-model.md, /contracts/*, quickstart.md, agent-specific file\n\n## Key rules\n\n- Use absolute paths\n- ERROR on gate failures or unresolved clarifications\n"}
{"session_id":"019a2405-639d-7192-9317-3a5f50dec49d","ts":1761542577,"text":"\n## User Input\n\n```text\nPhase 2: 链上打赏与Webhook → Reflect API → Helius验证 ,优先补齐Solana 交易验证与Reflect稳定币API,Dynamic SDK\n```\n\nYou **MUST** consider the user input before proceeding (if not empty).\n\n## Outline\n\n1. **Setup**: Run `.specify/scripts/bash/setup-plan.sh --json` from repo root and parse JSON for FEATURE_SPEC, IMPL_PLAN, SPECS_DIR, BRANCH. For single quotes in args like \"I'm Groot\", use escape syntax: e.g 'I'\\''m Groot' (or double-quote if possible: \"I'm Groot\").\n\n2. **Load context**: Read FEATURE_SPEC and `.specify/memory/constitution.md`. Load IMPL_PLAN template (already copied).\n\n3. **Execute plan workflow**: Follow the structure in IMPL_PLAN template to:\n   - Fill Technical Context (mark unknowns as \"NEEDS CLARIFICATION\")\n   - Fill Constitution Check section from constitution\n   - Evaluate gates (ERROR if violations unjustified)\n   - Phase 0: Generate research.md (resolve all NEEDS CLARIFICATION)\n   - Phase 1: Generate data-model.md, contracts/, quickstart.md\n   - Phase 1: Update agent context by running the agent script\n   - Re-evaluate Constitution Check post-design\n\n4. **Stop and report**: Command ends after Phase 2 planning. Report branch, IMPL_PLAN path, and generated artifacts.\n\n## Phases\n\n### Phase 0: Outline & Research\n\n1. **Extract unknowns from Technical Context** above:\n   - For each NEEDS CLARIFICATION → research task\n   - For each dependency → best practices task\n   - For each integration → patterns task\n\n2. **Generate and dispatch research agents**:\n\n   ```text\n   For each unknown in Technical Context:\n     Task: \"Research {unknown} for {feature context}\"\n   For each technology choice:\n     Task: \"Find best practices for {tech} in {domain}\"\n   ```\n\n3. **Consolidate findings** in `research.md` using format:\n   - Decision: [what was chosen]\n   - Rationale: [why chosen]\n   - Alternatives considered: [what else evaluated]\n\n**Output**: research.md with all NEEDS CLARIFICATION resolved\n\n### Phase 1: Design & Contracts\n\n**Prerequisites:** `research.md` complete\n\n1. **Extract entities from feature spec** → `data-model.md`:\n   - Entity name, fields, relationships\n   - Validation rules from requirements\n   - State transitions if applicable\n\n2. **Generate API contracts** from functional requirements:\n   - For each user action → endpoint\n   - Use standard REST/GraphQL patterns\n   - Output OpenAPI/GraphQL schema to `/contracts/`\n\n3. **Agent context update**:\n   - Run `.specify/scripts/bash/update-agent-context.sh codex`\n   - These scripts detect which AI agent is in use\n   - Update the appropriate agent-specific context file\n   - Add only new technology from current plan\n   - Preserve manual additions between markers\n\n**Output**: data-model.md, /contracts/*, quickstart.md, agent-specific file\n\n## Key rules\n\n- Use absolute paths\n- ERROR on gate failures or unresolved clarifications\n"}
{"session_id":"019a2405-639d-7192-9317-3a5f50dec49d","ts":1761542591,"text":"停止"}
{"session_id":"019a2405-639d-7192-9317-3a5f50dec49d","ts":1761542619,"text":"\n## User Input\n\n```text\nPhase 2: 链上打赏与Webhook → Reflect API → Helius验证 ,优先补齐Solana 交易验证与Reflect稳定币API,Dynamic SDK\n```\n\nYou **MUST** consider the user input before proceeding (if not empty).\n\n## Outline\n\n1. **Setup**: Run `.specify/scripts/bash/setup-plan.sh --json` from repo root and parse JSON for FEATURE_SPEC, IMPL_PLAN, SPECS_DIR, BRANCH. For single quotes in args like \"I'm Groot\", use escape syntax: e.g 'I'\\''m Groot' (or double-quote if possible: \"I'm Groot\").\n\n2. **Load context**: Read FEATURE_SPEC and `.specify/memory/constitution.md`. Load IMPL_PLAN template (already copied).\n\n3. **Execute plan workflow**: Follow the structure in IMPL_PLAN template to:\n   - Fill Technical Context (mark unknowns as \"NEEDS CLARIFICATION\")\n   - Fill Constitution Check section from constitution\n   - Evaluate gates (ERROR if violations unjustified)\n   - Phase 0: Generate research.md (resolve all NEEDS CLARIFICATION)\n   - Phase 1: Generate data-model.md, contracts/, quickstart.md\n   - Phase 1: Update agent context by running the agent script\n   - Re-evaluate Constitution Check post-design\n\n4. **Stop and report**: Command ends after Phase 2 planning. Report branch, IMPL_PLAN path, and generated artifacts.\n\n## Phases\n\n### Phase 0: Outline & Research\n\n1. **Extract unknowns from Technical Context** above:\n   - For each NEEDS CLARIFICATION → research task\n   - For each dependency → best practices task\n   - For each integration → patterns task\n\n2. **Generate and dispatch research agents**:\n\n   ```text\n   For each unknown in Technical Context:\n     Task: \"Research {unknown} for {feature context}\"\n   For each technology choice:\n     Task: \"Find best practices for {tech} in {domain}\"\n   ```\n\n3. **Consolidate findings** in `research.md` using format:\n   - Decision: [what was chosen]\n   - Rationale: [why chosen]\n   - Alternatives considered: [what else evaluated]\n\n**Output**: research.md with all NEEDS CLARIFICATION resolved\n\n### Phase 1: Design & Contracts\n\n**Prerequisites:** `research.md` complete\n\n1. **Extract entities from feature spec** → `data-model.md`:\n   - Entity name, fields, relationships\n   - Validation rules from requirements\n   - State transitions if applicable\n\n2. **Generate API contracts** from functional requirements:\n   - For each user action → endpoint\n   - Use standard REST/GraphQL patterns\n   - Output OpenAPI/GraphQL schema to `/contracts/`\n\n3. **Agent context update**:\n   - Run `.specify/scripts/bash/update-agent-context.sh codex`\n   - These scripts detect which AI agent is in use\n   - Update the appropriate agent-specific context file\n   - Add only new technology from current plan\n   - Preserve manual additions between markers\n\n**Output**: data-model.md, /contracts/*, quickstart.md, agent-specific file\n\n## Key rules\n\n- Use absolute paths\n- ERROR on gate failures or unresolved clarifications\n"}
